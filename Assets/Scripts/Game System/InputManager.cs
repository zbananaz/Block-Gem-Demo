using UnityEngine;

public class InputManager : MonoBehaviour
{
    private Camera mainCamera;
    public GameObject selectedObject = null; // V·∫≠t th·ªÉ ƒëang ƒë∆∞·ª£c ch·ªçn
    private Vector3 targetPosition; // V·ªã tr√≠ m·ª•c ti√™u khi k√©o
    private Plane groundPlane; // M·∫∑t ph·∫≥ng ƒë·ªÉ ch·ªçn v·ªã tr√≠
    private Rigidbody rb;
    
    [SerializeField]
    private float speed = 10.0f; // T·ªëc ƒë·ªô di chuy·ªÉn
    private bool isDragging = false; // Bi·∫øn ki·ªÉm tra tr·∫°ng th√°i k√©o
    void Start()
    {
        mainCamera = Camera.main;
        groundPlane = new Plane(Vector3.up, Vector3.zero); // M·∫∑t ph·∫≥ng c·ªë ƒë·ªãnh ·ªü Y = 0
    }

    void Update()
    {
        if (Input.touchCount > 0)
        {
            Touch touch = Input.GetTouch(0);
            Vector3 touchWorldPosition = GetWorldPositionFromTouch(touch);
            switch (touch.phase)
            {
                case TouchPhase.Began:
                    TrySelectObject(touch);
                    if (selectedObject != null)
                    {
                        targetPosition = touchWorldPosition;
                        Outline outline = selectedObject.GetComponent<Outline>();
                        if (outline == null)
                        {
                            outline = selectedObject.AddComponent<Outline>();
                        }
                        outline.enabled = true;
                        outline.OutlineColor = Color.white;
                        outline.OutlineWidth = 10.0f;

                        rb = selectedObject.GetComponent<Rigidbody>();
                        if (rb != null)
                        {
                            // rb.isKinematic = true; // Gi·ªØ nguy√™n tr·∫°ng th√°i khi k√©o
                            rb.collisionDetectionMode = CollisionDetectionMode.ContinuousDynamic; // Tr√°nh xuy√™n v·∫≠t th·ªÉ
                        }

                        isDragging = true; // B·∫Øt ƒë·∫ßu k√©o
                    }
                    break;

                case TouchPhase.Moved:
                    if (isDragging && selectedObject != null)
                    {
                        targetPosition = touchWorldPosition;
                    }
                    break;

                case TouchPhase.Ended:
                case TouchPhase.Canceled:
                    if (isDragging && selectedObject != null)
                    {
                        Outline outline = selectedObject.GetComponent<Outline>();
                        if (outline != null)
                        {
                            outline.enabled = false;
                        }

                        if (rb != null)
                        {
                            // rb.isKinematic = false; // Tr·∫£ l·∫°i tr·∫°ng th√°i v·∫≠t l√Ω
                            rb.linearVelocity = Vector3.zero; // D·ª´ng di chuy·ªÉn
                            rb.angularVelocity = Vector3.zero;
                        }
                        targetPosition = touchWorldPosition;
                        isDragging = false; // D·ª´ng k√©o
                        selectedObject = null;
                        rb = null;
                    }
                    break;
            }
        }
    }

    // üõ† Di chuy·ªÉn b·∫±ng Rigidbody ngay khi k√©o
    void FixedUpdate()
    {
        if (isDragging && selectedObject != null && rb != null)
        {
           
            //  Vector3 mousePos = Vector3.Lerp(rb.position, targetPosition, moveSpeed * Time.fixedDeltaTime);
            rb.linearVelocity = 
            (targetPosition - selectedObject.transform.position).normalized * speed;
            Debug.Log(rb.linearVelocity);
        }
    }

    private void TrySelectObject(Touch touch)
    {
        Ray ray = mainCamera.ScreenPointToRay(touch.position);
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit))
        {
            if (hit.transform.CompareTag("Block")) // Ch·ªâ ch·ªçn object c√≥ tag "Block"
            {
                selectedObject = hit.transform.gameObject;
                rb = selectedObject.GetComponent<Rigidbody>();
            }
        }
    }

    private Vector3 GetWorldPositionFromTouch(Touch touch)
    {
        Ray ray = mainCamera.ScreenPointToRay(touch.position);

        if (groundPlane.Raycast(ray, out float distance))
        {
            Vector3 worldPosition = ray.GetPoint(distance);
            return new Vector3(worldPosition.x, 0.21f, worldPosition.z); // Gi·ªØ nguy√™n Y
        }

        return transform.position;
    }
}
